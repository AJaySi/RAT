##########################################################
#
# This cofig file contains parameters to control the test tool
# and sanity level testing for any API. The defaults defined here need
# are used for command line invocation of the tool.
#
# The testframework is config file driven, this config file is a unit test
# case for any/all REST APIs.
# While using --record option at the commmand prompt will record file
# as specific TC against that API. 
#
##########################################################

# Dont edit this xection if you do not know what you are doing.
[framework_required]
# Required, else fail run.
TC_url=
# Check in 'testcases' direcctory, use existing or creates a new one.
TC_dir_name=performance
# Unique TC name, else fail. Give TC unique name.
TC_name=kafka_perf2
# Default is GET, else specify the method with URL.
TC_method=
# Optional
TC_payload_items=
# Mention in format username:password. Defaults to admin:admin.
credentials=admin:admin

# List of test validation for each rest api resquest response.
[assertions]
# The framework is advisory in command line mode. 
# When the framework is 'run' for existing TCs, below option makes sense.
continue_on_failure=no
status_code: 201

#-------------------------------------------------------------------------------------
# This sections contains all the texts that will matched in response header.
# This is important to maintain/conform to expected response standard across project.
# Match the HTTP header items as shown on the command prompt. Some adjusting is needed.
# To ADD: Simply follow the format as below to add more tests.
# All methods (get, post, put, patch, delete, head) support below tests.
#------------------------------------------------------------------------------------- 
[test_header]
# https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
# General headers: General applicability for request and response headers.
#Cache-control: no-cache
#Connection: keep-alive
#Transfer-Encoding: chunked
#Access-Control-Allow-Credentials: true
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Cache-Control: no-store
Pragma: no-cache
#Set-Cookie: AMBARISESSIONID=1l98nvf1r12xnomchbtzhg6p2;Path=/;HttpOnly
#Expires: Thu, 01 Jan 1970 00:00:00 GMT
User: admin
Content-Type:application/json
# Client request headers
#Accept: types/subtype
#Accept-Encoding: compress, gzip
#Accept-Charset: character_set 
#Authorization : credentials
#Cookie: names

# Server response headers
#Accept-Ranges: none

# Entity Headers
#Allow: method
#Content-Encoding: gzip
# Content-Range : bytes-unit SP first-byte-pos "-" last-byte-pos
# Pagination-Count: 100
#Content-Type: application/json

#----------------------------------------------------
# Match the values below in the body of the response.
#----------------------------------------------------
[test_body]
# Optional : Test something you expect in the response body.
#Example:: expect_in_body: example_string

#name: test_1
#id:default
#name:default
#dataBase:kafka_rest
#tableName:data_24
#jobType:KAFKA
#owner:admin

#----------------------------------------------------------------------------------------
# Performance parameters below help one do response time benchmarking at unit test level.
# By increasing the number of 'num_users': Number of users to simulate and test 'duration',
# one can get load and stress testing from this tool.
#----------------------------------------------------------------------------------------
[performance]
# Define, if performance tests needs to be run. Takes 2 values as 'no' and 'yes'
run_perf_tests=yes
# Specify the number of simulated/virtual users to create for load testing.
num_users=10
# Specify the duration of time in seconds(s) to run the performance tests.
test_duration=5s
# benchmark_url